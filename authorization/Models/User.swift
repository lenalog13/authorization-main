//
//  Person.swift
//  authorization
//
//  Created by –ï–ª–µ–Ω–∞ –õ–æ–≥–∏–Ω–æ–≤–∞ on 24.12.2022.
//

import Foundation

struct User {
    let login: String
    let password: String
    
    let person: Person
}

struct Person {
    let name: String
    let surname: String
    
    let gender: Gender
    
    let dayOfBirth: Int
    let monthOfBirth: Month
    let yearOfbirth: Int
    
    let city: String
    let egucation: String
    let hobby: [String: String]
}

enum Gender: String {
    case female = "üë©"
    case male = "üßë"
}

enum Month: Int {
    case january = 1
    case february
    case march
    case april
    case may
    case june
    case july
    case august
    case september
    case october
    case november
    case december
}

extension Person {
    
    var age: Int {
        var age = 0
        
        let dayNow = 13
        let monthNow = Month.january
        let yearNow = 2023
        
        if (monthNow.rawValue > monthOfBirth.rawValue) ||
            (monthNow.rawValue == monthOfBirth.rawValue && dayNow >= dayOfBirth) {
            age = yearNow - yearOfbirth
        } else {
            age = yearNow - yearOfbirth - 1
        }
        return age
    }
    
    var zodiacSign: String {
        let date = (dayOfBirth, monthOfBirth)
        
        switch date {
        case (21...31, .march), (1...20, .april):
            return "aries"
        case (_, .april), (1...20, .may):
            return "taurus"
        case (_, .may), (1...20, .june):
            return "gemini"
        case (_, .june), (1...22, .july):
            return "cancer"
        case (_, .july), (1...22, .august):
            return "leo"
        case (_, .august), (1...22, .september):
            return "virgo"
        case (_, .september), (1...22, .october):
            return "libra"
        case (_, .october), (1...22, .november):
            return "scorpio"
        case (_, .november), (1...21, .december):
            return "sagittarius"
        case (_, .december), (1...19, .january):
            return "capricorn"
        case (_, .january), (1...19, .february):
            return "aquarius"
        default:
            return "risces"
        }
    }
}

extension User {
    static func getUser() -> User {
        User(login: "LenaLog", password: "Password",
             person: Person(name: "Elena", surname: "Loginova",
                            gender: .female,
                            dayOfBirth: 13, monthOfBirth: .june, yearOfbirth: 2000,
                            city: "Moscow",
                            egucation: "not finished higher",
                            hobby:
                                ["–ë–∞—Å–∫–µ—Ç–±–æ–ªüèÄ": "–õ—é–±–ª—é –∫–æ–º–∞–Ω–¥–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞. –ù–∞—á–∞–ª–∞ –∏–≥—Ä–∞—Ç—å –≤ 6 –∫–ª–∞—Å—Å–µ. –í —Å—Ç–∞—Ä—à–∏—Ö –∫–ª–∞—Å—Å–∞—Ö –∏–≥—Ä–∞–ª–∞ –∑–∞ —Å–±–æ—Ä–Ω—É—é –≥–æ—Ä–æ–¥–∞. –°–µ–π—á–∞—Å –∏–Ω–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –º–æ–≥—É –ø–æ–∫–∏–¥–∞—Ç—å –º—è—á –≤–æ –¥–≤–æ—Ä–µ",
                                 "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞üìö": "–°–æ —Å—Ä–µ–¥–Ω–µ–π —à–∫–æ–ª—ã –Ω–∞—á–∞–ª–∞ —Ö–æ–¥–∏—Ç—å –Ω–∞ —É–≥–ª—É–±–ª–µ–Ω–∫—É –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –•–æ—Ä–æ—à–∞ —Å–¥–∞–ª–∞ –ï–ì–≠, –ø–æ—Å—Ç—É–ø–∏–ª–∞ –≤ –ú–ì–¢–£ –∏–º. –ë–∞—É–º–∞–Ω–∞ –Ω–∞ –±—é–¥–∂–µ—Ç. –î–æ —Å–∏—Ö –ø–æ—Ä –ª—é–ª–±–ª—é —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏",
                                 "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è‚úàÔ∏è": "–õ—é–±–æ–≤—å –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–æ–µ–∑–∫–∞–º –ø—Ä–æ—è–≤–∏–ª–∞—Å—å –µ—â–µ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–π —à–∫–æ–ª–µ. –í 10 –∫–ª–∞—Å—Å–µ, –ø–æ–µ—Ö–∞–ª–∞ –≤ –ì–µ—Ä–º–∞–Ω–∏—é –ø–æ –æ–±–º–µ–Ω—É. –í –∫–æ–≤–∏–¥–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –µ–∑–¥–∏–ª–∞ –ø–ª —Ä–∞–∑–Ω—ã–º –≥–æ—Ä–æ–¥–∞–º –†–æ—Å–∏–∏. –í –ø—Ä–æ—à–ª–æ–º –≥–æ–¥—É –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ—Å–µ—Ç–∏—Ç—å –¢–∞–π–ª–∞–Ω–¥. –ï—â–µ –º–Ω–æ–≥–æ –º–µ—Å—Ç, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—á–µ—Ç—Å—è –ø–æ–±—ã–≤–∞—Ç—å"
                            ]))
    }
    
}
